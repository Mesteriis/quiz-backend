from typing import Any

from fastapi import APIRouter, Depends, HTTPException, status

from models.user import User
from repositories.dependencies import (
    get_push_subscription_repository,
    get_push_notification_repository,
    get_notification_analytics_repository,
)
from repositories.push_notification import (
    PushSubscriptionRepository,
    PushNotificationRepository,
    NotificationAnalyticsRepository,
)
from routers.auth import get_current_user
from schemas.push_notification import (
    NotificationAnalyticsCreate,
    NotificationCategoriesUpdate,
    PushNotificationCreate,
    PushNotificationRead,
    PushNotificationStatsResponse,
    PushSubscriptionCreate,
    PushSubscriptionRead,
    VapidKeyResponse,
)
from services.push_notification_service import push_service

router = APIRouter(prefix="/notifications", tags=["Push Notifications"])


@router.get("/vapid-key", response_model=VapidKeyResponse)
async def get_vapid_public_key():
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π VAPID –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        public_key = push_service.get_vapid_public_key()
        return VapidKeyResponse(public_key=public_key)
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VAPID –∫–ª—é—á–∞: {e!s}",
        )


@router.post("/subscribe", response_model=dict[str, str])
async def subscribe_to_push_notifications(
    subscription_data: PushSubscriptionCreate,
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = subscription_data.subscription
        endpoint = subscription.get("endpoint")
        keys = subscription.get("keys", {})
        p256dh_key = keys.get("p256dh")
        auth_key = keys.get("auth")

        if not all([endpoint, p256dh_key, auth_key]):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            )

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        new_subscription = await subscription_repo.create_subscription(
            user_id=current_user.id,
            endpoint=endpoint,
            p256dh_key=p256dh_key,
            auth_key=auth_key,
        )

        return {
            "status": "success",
            "message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            "subscription_id": str(new_subscription.id),
        }

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e!s}",
        )


@router.post("/unsubscribe", response_model=dict[str, str])
async def unsubscribe_from_push_notifications(
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        await subscription_repo.delete_user_subscriptions(current_user.id)

        return {"status": "success", "message": "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e!s}",
        )


@router.put("/categories", response_model=dict[str, str])
async def update_notification_categories(
    categories_data: NotificationCategoriesUpdate,
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        await subscription_repo.update_user_categories(
            current_user.id, categories_data.categories
        )

        return {
            "status": "success",
            "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "categories": categories_data.categories,
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e!s}",
        )


@router.post("/test", response_model=dict[str, str])
async def send_test_notification(
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_data = push_service.create_notification_data(
            title="üéâ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            body=f"–ü—Ä–∏–≤–µ—Ç, {current_user.username}! Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
            category="test",
            icon="/pwa-192x192.png",
            url="/profile",
            priority="normal",
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        result = await push_service.send_to_user_via_repo(
            user_id=current_user.id,
            notification_data=notification_data,
            subscription_repo=subscription_repo,
        )

        if result["sent"] > 0:
            return {
                "status": "success",
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                "sent": str(result["sent"]),
            }
        else:
            return {
                "status": "warning",
                "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e!s}",
        )


@router.post("/send", response_model=dict[str, Any])
async def send_notification(
    notification_data: PushNotificationCreate,
    target_user_id: int = None,
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        )

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        push_data = push_service.create_notification_data(
            title=notification_data.title,
            body=notification_data.body,
            category=notification_data.category,
            icon=notification_data.icon,
            image=notification_data.image,
            url=notification_data.url,
            priority=notification_data.priority,
            require_interaction=notification_data.require_interaction,
            silent=notification_data.silent,
        )

        if target_user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            result = await push_service.send_to_user_via_repo(
                user_id=target_user_id,
                notification_data=push_data,
                subscription_repo=subscription_repo,
                categories=[notification_data.category],
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            result = await push_service.send_to_category_via_repo(
                category=notification_data.category,
                notification_data=push_data,
                subscription_repo=subscription_repo,
            )

        return {
            "status": "success",
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã",
            "result": result,
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e!s}",
        )


@router.post("/analytics", response_model=dict[str, str])
async def record_notification_analytics(
    analytics_data: NotificationAnalyticsCreate,
    analytics_repo: NotificationAnalyticsRepository = Depends(
        get_notification_analytics_repository
    ),
):
    """
    –ó–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        await analytics_repo.record_analytics(
            notification_id=analytics_data.notification_id,
            user_id=analytics_data.user_id,
            action=analytics_data.action,
            timestamp=analytics_data.timestamp,
        )

        return {"status": "success", "message": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞"}

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e!s}",
        )


@router.get("/subscriptions", response_model=list[PushSubscriptionRead])
async def get_user_subscriptions(
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subscriptions = await subscription_repo.get_user_subscriptions(current_user.id)

        return [
            PushSubscriptionRead.model_validate(subscription)
            for subscription in subscriptions
        ]

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e!s}",
        )


@router.get("/history", response_model=list[PushNotificationRead])
async def get_notification_history(
    limit: int = 50,
    offset: int = 0,
    category: str = None,
    current_user: User = Depends(get_current_user),
    notification_repo: PushNotificationRepository = Depends(
        get_push_notification_repository
    ),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        notifications = await notification_repo.get_user_notifications(
            user_id=current_user.id,
            limit=limit,
            offset=offset,
            category=category,
        )

        return [
            PushNotificationRead.model_validate(notification)
            for notification in notifications
        ]

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e!s}",
        )


@router.get("/stats", response_model=PushNotificationStatsResponse)
async def get_notification_stats(
    days: int = 30,
    current_user: User = Depends(get_current_user),
    analytics_repo: NotificationAnalyticsRepository = Depends(
        get_notification_analytics_repository
    ),
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        stats = await analytics_repo.get_notification_stats(days)

        return PushNotificationStatsResponse.model_validate(stats)

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e!s}",
        )


@router.delete("/cleanup", response_model=dict[str, Any])
async def cleanup_expired_subscriptions(
    current_user: User = Depends(get_current_user),
    subscription_repo: PushSubscriptionRepository = Depends(
        get_push_subscription_repository
    ),
):
    """
    –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫",
        )

    try:
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        cleaned_count = await subscription_repo.cleanup_expired_subscriptions()

        return {
            "status": "success",
            "message": f"–û—á–∏—â–µ–Ω–æ {cleaned_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
            "cleaned_count": cleaned_count,
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e!s}",
        )
