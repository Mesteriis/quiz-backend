#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è extend_existing=True –≤–æ –≤—Å–µ –º–æ–¥–µ–ª–∏ SQLAlchemy.
"""

import os
import re
from pathlib import Path


def fix_model_file(file_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç extend_existing=True –≤ –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ extend_existing=True
    if "extend_existing" in content:
        print(f"‚ÑπÔ∏è  –§–∞–π–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç extend_existing: {file_path}")
        return False

    # –ò—â–µ–º –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Base
    class_match = re.search(r"class\s+(\w+)\(Base\):", content)
    if not class_match:
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å Base –≤ —Ñ–∞–π–ª–µ: {file_path}")
        return False

    class_name = class_match.group(1)

    # –°–ª—É—á–∞–π 1: –ï—Å—Ç—å __table_args__ —Å tuple
    table_args_tuple_match = re.search(
        r"(\s+)__table_args__\s*=\s*\(\s*\n(.*?\n\s*)\)", content, re.DOTALL
    )
    if table_args_tuple_match:
        indent = table_args_tuple_match.group(1)
        # –î–æ–±–∞–≤–ª—è–µ–º extend_existing –≤ –∫–æ–Ω–µ—Ü tuple
        new_content = content.replace(
            table_args_tuple_match.group(0),
            f'{table_args_tuple_match.group(0)[:-1]}        {{"extend_existing": True}},\n{indent})',
        )
        print(f"‚úÖ –î–æ–±–∞–≤–∏–ª extend_existing –≤ tuple __table_args__: {file_path}")

        with open(file_path, "w", encoding="utf-8") as f:
            f.write(new_content)
        return True

    # –°–ª—É—á–∞–π 2: –ï—Å—Ç—å __table_args__ —Å dict
    table_args_dict_match = re.search(r"(\s+)__table_args__\s*=\s*\{([^}]*)\}", content)
    if table_args_dict_match:
        indent = table_args_dict_match.group(1)
        dict_content = table_args_dict_match.group(2)

        # –ï—Å–ª–∏ dict –ø—É—Å—Ç–æ–π
        if not dict_content.strip():
            new_dict_content = '"extend_existing": True'
        else:
            new_dict_content = f'{dict_content}, "extend_existing": True'

        new_content = content.replace(
            table_args_dict_match.group(0),
            f"{indent}__table_args__ = {{{new_dict_content}}}",
        )
        print(f"‚úÖ –î–æ–±–∞–≤–∏–ª extend_existing –≤ dict __table_args__: {file_path}")

        with open(file_path, "w", encoding="utf-8") as f:
            f.write(new_content)
        return True

    # –°–ª—É—á–∞–π 3: –ù–µ—Ç __table_args__ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ __tablename__
    tablename_match = re.search(r'(\s+)__tablename__\s*=\s*["\'][^"\']*["\']', content)
    if tablename_match:
        indent = tablename_match.group(1)
        new_content = content.replace(
            tablename_match.group(0),
            f'{tablename_match.group(0)}\n{indent}__table_args__ = {{"extend_existing": True}}',
        )
        print(f"‚úÖ –î–æ–±–∞–≤–∏–ª __table_args__ —Å extend_existing: {file_path}")

        with open(file_path, "w", encoding="utf-8") as f:
            f.write(new_content)
        return True

    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {file_path}")
    return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    models_dir = Path("src/models")

    if not models_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {models_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    fixed_files = 0
    total_files = 0

    for file_path in models_dir.glob("*.py"):
        if file_path.name in ["__init__.py", "__pycache__"]:
            continue

        total_files += 1
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path}")

        if fix_model_file(file_path):
            fixed_files += 1

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files - fixed_files}")


if __name__ == "__main__":
    main()
