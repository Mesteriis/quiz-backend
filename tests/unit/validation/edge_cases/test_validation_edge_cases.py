"""
–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Validation endpoints.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
- Unicode —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
- –†–µ–¥–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
- –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –ü–∞–º—è—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
"""

import pytest
from unittest.mock import AsyncMock, patch
import asyncio
import time


class TestEmailValidationEdgeCases:
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email."""

    async def test_validate_email_unicode_domains(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å Unicode –¥–æ–º–µ–Ω–∞–º–∏."""
        # Arrange
        unicode_emails = [
            "test@–ø—Ä–∏–º–µ—Ä.—Ä—Ñ",
            "user@m√ºnchen.de",
            "test@caf√©.fr",
            "user@Âåó‰∫¨.cn",
            "test@–º–æ—Å–∫–≤–∞.—Ä—Ñ",
            "user@ÿßŸÑÿπÿ±ÿ®Ÿäÿ©.com",
            "test@‡§π‡§ø‡§®‡•ç‡§¶‡•Ä.‡§≠‡§æ‡§∞‡§§",
            "user@ŒµŒªŒªŒ∑ŒΩŒπŒ∫Œ¨.gr",
        ]

        # Act & Assert
        for email in unicode_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data
            assert isinstance(data["is_valid"], bool)

    async def test_validate_email_emoji_domains(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å —ç–º–æ–¥–∑–∏ –≤ –¥–æ–º–µ–Ω–∞—Ö."""
        # Arrange
        emoji_emails = [
            "test@üòÄ.com",
            "user@üöÄ.space",
            "email@‚ù§Ô∏è.love",
            "test@üåç.world",
            "user@üéâ.party",
        ]

        # Act & Assert
        for email in emoji_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_maximum_length_parts(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π —á–∞—Å—Ç–µ–π."""
        # Arrange
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏: 64 —Å–∏–º–≤–æ–ª–∞
        max_local = "a" * 64
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–º–µ–Ω–∞: 255 —Å–∏–º–≤–æ–ª–æ–≤
        max_domain = "b" * 63 + ".com"  # 63 —Å–∏–º–≤–æ–ª–∞ –≤ –ø–æ–¥–¥–æ–º–µ–Ω–µ

        test_emails = [
            f"{max_local}@example.com",
            f"test@{max_domain}",
            f"{'a' * 32}@{'b' * 32}.com",
        ]

        # Act & Assert
        for email in test_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_ip_addresses(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å IP –∞–¥—Ä–µ—Å–∞–º–∏."""
        # Arrange
        ip_emails = [
            "user@[192.168.1.1]",
            "test@[127.0.0.1]",
            "email@[255.255.255.255]",
            "user@[::1]",  # IPv6 localhost
            "test@[2001:db8::1]",  # IPv6
            "user@192.168.1.1",  # –ë–µ–∑ —Å–∫–æ–±–æ–∫
        ]

        # Act & Assert
        for email in ip_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_special_local_parts(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏."""
        # Arrange
        special_local_emails = [
            '"test user"@example.com',  # –ö–∞–≤—ã—á–∫–∏
            '"test@domain"@example.com',  # @ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            '"test\\"user"@example.com',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            '"test\\\\user"@example.com',  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª—ç—à
            '"test user+tag"@example.com',  # –ü—Ä–æ–±–µ–ª –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            "test\\ user@example.com",  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª
            "test\\@user@example.com",  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π @
        ]

        # Act & Assert
        for email in special_local_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_deep_subdomain_nesting(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å –≥–ª—É–±–æ–∫–∏–º –≤–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤."""
        # Arrange
        deep_subdomain_emails = [
            "test@a.b.c.d.e.f.g.h.i.j.example.com",
            "user@level1.level2.level3.level4.level5.domain.com",
            "email@sub.sub.sub.sub.sub.sub.domain.org",
        ]

        # Act & Assert
        for email in deep_subdomain_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_rare_tlds(self, api_client, edge_case_email_factory):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å —Ä–µ–¥–∫–∏–º–∏ TLD."""
        # Arrange
        rare_tld_emails = [
            "test@example.museum",
            "user@example.travel",
            "email@example.aero",
            "test@example.coop",
            "user@example.info",
            "email@example.mobi",
            "test@example.tel",
            "user@example.xxx",
            "email@example.–æ–Ω–ª–∞–π–Ω",  # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π TLD
            "test@example.‰∏≠ÂõΩ",  # –ö–∏—Ç–∞–π—Å–∫–∏–π TLD
        ]

        # Act & Assert
        for email in rare_tld_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data

    async def test_validate_email_performance_stress(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π."""
        # Arrange
        stress_emails = [edge_case_email_factory.build().email for _ in range(100)]

        # Act
        start_time = time.time()
        responses = []

        for email in stress_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )
            responses.append(response)

        end_time = time.time()
        execution_time = end_time - start_time

        # Assert
        assert len(responses) == len(stress_emails)
        assert all(r.status_code == 200 for r in responses)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        assert execution_time < 30.0  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ 100 email

    async def test_validate_email_memory_intensive(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
        # Arrange
        # –°–æ–∑–¥–∞–µ–º email —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ (–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤)
        long_local = "a" * 63 + "b"  # 64 —Å–∏–º–≤–æ–ª–∞
        long_domain = "c" * 60 + ".com"  # –î–ª–∏–Ω–Ω—ã–π –¥–æ–º–µ–Ω

        email_request = edge_case_email_factory.build()
        email_request.email = f"{long_local}@{long_domain}"

        # Act
        response = await api_client.post(
            api_client.url_for("validate_email_endpoint"),
            json=email_request.model_dump(),
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["email"] == email_request.email
        assert "is_valid" in data

    async def test_validate_email_concurrent_identical_requests(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        # Arrange
        email_request = edge_case_email_factory.build()

        # Act - —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = []
        for _ in range(10):
            task = api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )
            tasks.append(task)

        responses = await asyncio.gather(*tasks)

        # Assert
        assert len(responses) == 10
        for response in responses:
            assert response.status_code == 200
            data = response.json()
            assert data["email"] == email_request.email

    async def test_validate_email_whitespace_edge_cases(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –ø—Ä–æ–±–µ–ª–æ–≤."""
        # Arrange
        whitespace_emails = [
            "test@example.com\t",  # –¢–∞–±—É–ª—è—Ü–∏—è –≤ –∫–æ–Ω—Ü–µ
            "\ntest@example.com",  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–µ
            "test@example.com\r",  # –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            "test@example.com\n",  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ
            "test@example.com\u00a0",  # –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
            "test@example.com\u2000",  # En quad
            "test@example.com\u2001",  # Em quad
            "test@example.com\u2002",  # En space
            "test@example.com\u2003",  # Em space
            "test@example.com\u2004",  # Three-per-em space
            "test@example.com\u2005",  # Four-per-em space
            "test@example.com\u2006",  # Six-per-em space
            "test@example.com\u2007",  # Figure space
            "test@example.com\u2008",  # Punctuation space
            "test@example.com\u2009",  # Thin space
            "test@example.com\u200a",  # Hair space
            "test@example.com\u202f",  # Narrow no-break space
            "test@example.com\u205f",  # Medium mathematical space
            "test@example.com\u3000",  # Ideographic space
        ]

        # Act & Assert
        for email in whitespace_emails:
            email_request = edge_case_email_factory.build()
            email_request.email = email

            response = await api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["email"] == email
            assert "is_valid" in data


class TestPhoneValidationEdgeCases:
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤."""

    async def test_validate_phone_unicode_numbers(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å Unicode —Ü–∏—Ñ—Ä–∞–º–∏."""
        # Arrange
        unicode_phones = [
            "ÔºãÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔºê",  # –ü–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            "ÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔºê",  # –ë–µ–∑ –ø–ª—é—Å–∞
            "‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚ÇÄ",  # –ü–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            "¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∞",  # –ù–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            "‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©",  # –¶–∏—Ñ—Ä—ã –≤ –∫—Ä—É–∂–∫–∞—Ö
            "ùüèùüêùüëùüíùüìùüîùüïùüñùüóùüé",  # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
        ]

        # Act & Assert
        for phone in unicode_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_emoji_separators(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏."""
        # Arrange
        emoji_phones = [
            "+1üòÄ234üòÄ567üòÄ8901",
            "8üöÄ916üöÄ123üöÄ45üöÄ67",
            "+7‚ù§Ô∏è916‚ù§Ô∏è123‚ù§Ô∏è45‚ù§Ô∏è67",
            "1üåç234üåç567üåç8901",
            "+44üéâ20üéâ7946üéâ0958",
        ]

        # Act & Assert
        for phone in emoji_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_maximum_length_boundary(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã."""
        # Arrange
        boundary_phones = [
            "+" + "1" * 15,  # –†–æ–≤–Ω–æ 15 —Ü–∏—Ñ—Ä (–º–∞–∫—Å–∏–º—É–º)
            "+" + "1" * 14,  # 14 —Ü–∏—Ñ—Ä
            "+" + "1" * 16,  # 16 —Ü–∏—Ñ—Ä (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ)
            "1" * 10,  # 10 —Ü–∏—Ñ—Ä (–º–∏–Ω–∏–º—É–º)
            "1" * 9,  # 9 —Ü–∏—Ñ—Ä (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞)
        ]

        # Act & Assert
        for phone in boundary_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_extreme_formatting(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        # Arrange
        extreme_phones = [
            "+1-2-3-4-5-6-7-8-9-0",  # –î–µ—Ñ–∏—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
            "+1 2 3 4 5 6 7 8 9 0",  # –ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
            "+1.2.3.4.5.6.7.8.9.0",  # –¢–æ—á–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
            "+1(2)3(4)5(6)7(8)9(0)",  # –°–∫–æ–±–∫–∏ –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã
            "+1_2_3_4_5_6_7_8_9_0",  # –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
            "+1/2/3/4/5/6/7/8/9/0",  # –°–ª—ç—à
            "+1\\2\\3\\4\\5\\6\\7\\8\\9\\0",  # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
            "+1|2|3|4|5|6|7|8|9|0",  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞
        ]

        # Act & Assert
        for phone in extreme_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_multiple_plus_signs(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏ +."""
        # Arrange
        multiple_plus_phones = [
            "++1234567890",
            "+++1234567890",
            "+1+234567890",
            "+12+34567890",
            "+123+4567890",
            "+1234567890+",
            "+1234567890++",
        ]

        # Act & Assert
        for phone in multiple_plus_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_mixed_scripts(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏."""
        # Arrange
        mixed_script_phones = [
            "+1ÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºôÔºê",  # –õ–∞—Ç–∏–Ω—Å–∫–∏–µ + —è–ø–æ–Ω—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            "ÔºòÔºôÔºëÔºñÔºëÔºíÔºìÔºîÔºïÔºñÔºó",  # –í—Å–µ —è–ø–æ–Ω—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            "+7ÔºôÔºëÔºñÔºëÔºíÔºìÔºîÔºïÔºñÔºó",  # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
            "+Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©Ÿ†",  # –ê—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
            "+‡•≠‡•Ø‡•ß‡•¨‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠",  # –î–µ–≤–∞–Ω–∞–≥–∞—Ä–∏ —Ü–∏—Ñ—Ä—ã
        ]

        # Act & Assert
        for phone in mixed_script_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_zero_padding(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º."""
        # Arrange
        zero_padded_phones = [
            "00001234567890",
            "0000079161234567",
            "000012345678901",
            "+000012345678901",
            "001234567890",
            "007916123456",
        ]

        # Act & Assert
        for phone in zero_padded_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_special_country_codes(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –æ—Å–æ–±—ã–º–∏ –∫–æ–¥–∞–º–∏ —Å—Ç—Ä–∞–Ω."""
        # Arrange
        special_codes = [
            "+800123456789",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            "+808123456789",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø
            "+870123456789",  # Inmarsat
            "+878123456789",  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
            "+881123456789",  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è —Å–≤—è–∑—å
            "+882123456789",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–µ—Ç–∏
            "+883123456789",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–µ—Ç–∏
            "+888123456789",  # –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            "+979123456789",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ø—Ä–µ–º–∏—É–º-—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        ]

        # Act & Assert
        for phone in special_codes:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_phone_performance_stress(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π."""
        # Arrange
        stress_phones = [edge_case_phone_factory.build().phone for _ in range(100)]

        # Act
        start_time = time.time()
        responses = []

        for phone in stress_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )
            responses.append(response)

        end_time = time.time()
        execution_time = end_time - start_time

        # Assert
        assert len(responses) == len(stress_phones)
        assert all(r.status_code == 200 for r in responses)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        assert execution_time < 30.0  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ 100 —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

    async def test_validate_phone_memory_boundary(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø–∞–º—è—Ç–∏."""
        # Arrange
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        long_phone = "+1" + "-".join(["23"] * 100)  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π

        phone_request = edge_case_phone_factory.build()
        phone_request.phone = long_phone

        # Act
        response = await api_client.post(
            api_client.url_for("validate_phone_endpoint"),
            json=phone_request.model_dump(),
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["phone"] == long_phone
        assert "is_valid" in data
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
        assert data["is_valid"] is False


class TestBatchValidationEdgeCases:
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""

    async def test_validate_emails_batch_maximum_size(self, api_client):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º."""
        # Arrange - —Ä–æ–≤–Ω–æ 100 email (–º–∞–∫—Å–∏–º—É–º)
        emails = [f"user{i}@example.com" for i in range(100)]

        # Act
        response = await api_client.post(
            api_client.url_for("validate_emails_batch"),
            json={
                "emails": emails,
                "check_mx": False,
                "check_smtp": False,
            },
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["total_count"] == 100
        assert len(data["results"]) == 100

    async def test_validate_emails_batch_unicode_mix(self, api_client):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ Unicode email."""
        # Arrange
        unicode_emails = [
            "test@example.com",
            "—Ç–µ—Å—Ç@–ø—Ä–∏–º–µ—Ä.—Ä—Ñ",
            "„ÉÜ„Çπ„Éà@‰æã.jp",
            "test@caf√©.fr",
            "Áî®Êà∑@‰æãÂ≠ê.cn",
            "◊û◊©◊™◊û◊©@◊ì◊ï◊í◊û◊î.com",
            "œáœÅŒÆœÉœÑŒ∑œÇ@œÄŒ±œÅŒ¨Œ¥ŒµŒπŒ≥ŒºŒ±.gr",
            "usu√°rio@exemplo.com",
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å@–ø—Ä–∏–º–µ—Ä.—Ä—Ñ",
            "ÏÇ¨Ïö©Ïûê@ÏòàÏãú.kr",
        ]

        # Act
        response = await api_client.post(
            api_client.url_for("validate_emails_batch"),
            json={
                "emails": unicode_emails,
                "check_mx": False,
                "check_smtp": False,
            },
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["total_count"] == len(unicode_emails)
        assert len(data["results"]) == len(unicode_emails)

    async def test_validate_emails_batch_performance_timing(self, api_client):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        # Arrange
        emails = [f"user{i}@example{i}.com" for i in range(50)]

        # Act
        start_time = time.time()

        response = await api_client.post(
            api_client.url_for("validate_emails_batch"),
            json={
                "emails": emails,
                "check_mx": False,
                "check_smtp": False,
            },
        )

        end_time = time.time()
        execution_time = end_time - start_time

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["total_count"] == len(emails)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π
        assert execution_time < 10.0  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ 50 email

    async def test_validate_emails_batch_memory_intensive(self, api_client):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º–∏ email –∞–¥—Ä–µ—Å–∞–º–∏."""
        # Arrange
        large_emails = []
        for i in range(20):
            local_part = "a" * 60  # –î–ª–∏–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
            domain_part = f"b{i}" * 30 + ".com"  # –î–ª–∏–Ω–Ω—ã–π –¥–æ–º–µ–Ω
            large_emails.append(f"{local_part}@{domain_part}")

        # Act
        response = await api_client.post(
            api_client.url_for("validate_emails_batch"),
            json={
                "emails": large_emails,
                "check_mx": False,
                "check_smtp": False,
            },
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["total_count"] == len(large_emails)
        assert len(data["results"]) == len(large_emails)


class TestValidationConcurrencyEdgeCases:
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""

    async def test_validate_concurrent_different_emails(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö email."""
        # Arrange
        email_requests = [edge_case_email_factory.build() for _ in range(20)]

        # Act
        tasks = []
        for email_request in email_requests:
            task = api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )
            tasks.append(task)

        responses = await asyncio.gather(*tasks)

        # Assert
        assert len(responses) == 20
        for i, response in enumerate(responses):
            assert response.status_code == 200
            data = response.json()
            assert data["email"] == email_requests[i].email

    async def test_validate_concurrent_mixed_endpoints(
        self, api_client, edge_case_email_factory, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö validation endpoints."""
        # Arrange
        email_request = edge_case_email_factory.build()
        phone_request = edge_case_phone_factory.build()

        # Act
        tasks = [
            api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            ),
            api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            ),
            api_client.get(api_client.url_for("validation_health_check")),
        ]

        responses = await asyncio.gather(*tasks)

        # Assert
        assert len(responses) == 3
        for response in responses:
            assert response.status_code == 200

    async def test_validate_race_condition_simulation(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        # Arrange
        email_request = edge_case_email_factory.build()

        # Act - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ
        tasks = []
        for _ in range(50):
            task = api_client.post(
                api_client.url_for("validate_email_endpoint"),
                json=email_request.model_dump(),
            )
            tasks.append(task)

        responses = await asyncio.gather(*tasks)

        # Assert
        assert len(responses) == 50
        for response in responses:
            assert response.status_code == 200
            data = response.json()
            assert data["email"] == email_request.email
            # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
            assert data["is_valid"] == responses[0].json()["is_valid"]


class TestValidationLimitsAndBoundaries:
    """–¢–µ—Å—Ç—ã –ª–∏–º–∏—Ç–æ–≤ –∏ –≥—Ä–∞–Ω–∏—Ü –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""

    async def test_validate_email_at_character_limit(
        self, api_client, edge_case_email_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤."""
        # Arrange - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–±—â–∞—è –¥–ª–∏–Ω–∞ email 254 —Å–∏–º–≤–æ–ª–∞
        local_part = "a" * 64  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
        domain_part = "b" * 63 + ".com"  # –î–ª–∏–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        total_length = len(local_part) + 1 + len(domain_part)  # +1 –¥–ª—è @

        if total_length <= 254:
            email = f"{local_part}@{domain_part}"
        else:
            # –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ –ª–∏–º–∏—Ç
            domain_part = "b" * (254 - 64 - 1 - 4) + ".com"
            email = f"{local_part}@{domain_part}"

        email_request = edge_case_email_factory.build()
        email_request.email = email

        # Act
        response = await api_client.post(
            api_client.url_for("validate_email_endpoint"),
            json=email_request.model_dump(),
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["email"] == email
        assert "is_valid" in data

    async def test_validate_phone_at_digit_limit(
        self, api_client, edge_case_phone_factory
    ):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–∞ —Ü–∏—Ñ—Ä."""
        # Arrange
        boundary_phones = [
            "+" + "1" * 15,  # –ú–∞–∫—Å–∏–º—É–º 15 —Ü–∏—Ñ—Ä
            "+" + "1" * 14,  # 14 —Ü–∏—Ñ—Ä
            "1" * 10,  # –ú–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä
            "1" * 11,  # 11 —Ü–∏—Ñ—Ä
        ]

        # Act & Assert
        for phone in boundary_phones:
            phone_request = edge_case_phone_factory.build()
            phone_request.phone = phone

            response = await api_client.post(
                api_client.url_for("validate_phone_endpoint"),
                json=phone_request.model_dump(),
            )

            assert response.status_code == 200
            data = response.json()

            assert data["phone"] == phone
            assert "is_valid" in data

    async def test_validate_domain_at_length_limit(self, api_client):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã."""
        # Arrange - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–º–µ–Ω–∞ 255 —Å–∏–º–≤–æ–ª–æ–≤
        long_domain = (
            "a" * 63 + "." + "b" * 63 + "." + "c" * 63 + "." + "d" * 60 + ".com"
        )

        # Act
        response = await api_client.get(
            api_client.url_for("check_domain_mx_records", domain=long_domain)
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["domain"] == long_domain
        assert "mx_valid" in data

    async def test_validate_batch_at_size_limit(self, api_client):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞."""
        # Arrange - —Ä–æ–≤–Ω–æ 100 email
        emails = [f"user{i}@example.com" for i in range(100)]

        # Act
        response = await api_client.post(
            api_client.url_for("validate_emails_batch"),
            json={
                "emails": emails,
                "check_mx": False,
                "check_smtp": False,
            },
        )

        # Assert
        assert response.status_code == 200
        data = response.json()

        assert data["total_count"] == 100
        assert len(data["results"]) == 100
