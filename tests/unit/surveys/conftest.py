"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø—É–±–ª–∏–∫–∞—Ü–∏—é,
–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–ø—Ä–æ—Å—ã, –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.
"""

import pytest
from typing import Dict, Any, Optional, List
from unittest.mock import AsyncMock, MagicMock

# –ò–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫ –¥–ª—è surveys –¥–æ–º–µ–Ω–∞
from tests.factories import (
    # Survey —Ñ–∞–±—Ä–∏–∫–∏
    SurveyFactory,
    PublicSurveyFactory,
    PrivateSurveyFactory,
    InactiveSurveyFactory,
    SurveyWithQuestionsFactory,
    ShortSurveyFactory,
    LongSurveyFactory,
    RecentSurveyFactory,
    PopularSurveyFactory,
    ResearchSurveyFactory,
    FeedbackSurveyFactory,
    # Question —Ñ–∞–±—Ä–∏–∫–∏
    QuestionFactory,
    TextQuestionFactory,
    RatingQuestionFactory,
    # RespondentSurvey —Ñ–∞–±—Ä–∏–∫–∏
    RespondentSurveyFactory,
    StartedSurveyFactory,
    InProgressSurveyFactory,
    AlmostCompletedSurveyFactory,
    CompletedSurveyFactory,
    AbandonedSurveyFactory,
    QuickCompletedSurveyFactory,
    ThoroughCompletedSurveyFactory,
    TelegramSurveyFactory,
    MobileSurveyFactory,
    # User —Ñ–∞–±—Ä–∏–∫–∏ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –æ–ø—Ä–æ—Å–æ–≤)
    UserFactory,
    AdminUserFactory,
    RegularUserFactory,
    # Utility functions
    create_survey_with_questions,
    create_test_surveys_batch,
    create_survey_lifecycle,
    create_complex_survey_structure,
)


@pytest.fixture
async def survey_manager(db_session):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–µ—Å—Ç–∞—Ö."""
    from tests.factories.survey_factory import SurveyAsyncManager

    return SurveyAsyncManager(db_session)


@pytest.fixture
async def question_manager(db_session):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–µ—Å—Ç–∞—Ö."""
    from tests.factories.question_factory import QuestionAsyncManager

    return QuestionAsyncManager(db_session)


@pytest.fixture
async def sample_survey(survey_manager):
    """–ë–∞–∑–æ–≤—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return await survey_manager.create_public_survey(
        title="Sample Test Survey",
        description="A sample survey for testing purposes",
    )


@pytest.fixture
async def sample_private_survey(survey_manager):
    """–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return await survey_manager.create_private_survey(
        title="Private Test Survey",
        description="A private survey for testing purposes",
    )


@pytest.fixture
async def sample_inactive_survey(survey_manager):
    """–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return await survey_manager.create_inactive_survey(
        title="Inactive Test Survey",
        description="An inactive survey for testing purposes",
    )


@pytest.fixture
async def sample_question(question_manager, sample_survey):
    """–ë–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
    return await question_manager.create_text_question(
        survey_id=sample_survey.id,
        text="What is your favorite color?",
        order=1,
    )


@pytest.fixture
async def survey_with_questions(survey_manager):
    """–û–ø—Ä–æ—Å —Å –Ω–∞–±–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤."""
    return await survey_manager.create_survey_with_questions(
        question_count=5,
        title="Survey with Multiple Questions",
        description="A survey containing multiple questions for testing",
    )


@pytest.fixture
async def long_survey(survey_manager):
    """–î–ª–∏–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    return await survey_manager.create_long_survey(
        question_count=50,
        title="Long Performance Test Survey",
    )


@pytest.fixture
async def short_survey(survey_manager):
    """–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    return await survey_manager.create_short_survey(
        question_count=2,
        title="Quick Survey",
    )


@pytest.fixture
async def popular_survey(survey_manager):
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ—Ç–≤–µ—Ç–æ–≤."""
    return await survey_manager.create_popular_survey(
        response_count=100,
        title="Popular Survey with Many Responses",
    )


@pytest.fixture
async def research_survey(survey_manager):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—Ä–æ—Å –¥–ª—è –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤."""
    return await survey_manager.create_research_survey(
        title="Research Survey",
        categories=["education", "research", "academic"],
    )


@pytest.fixture
async def feedback_survey(survey_manager):
    """–û–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    return await survey_manager.create_feedback_survey(
        title="Feedback Survey",
        target_type="service",
    )


@pytest.fixture
async def surveys_batch(survey_manager):
    """Batch –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    return await survey_manager.create_surveys_batch(
        count=20,
        mix_types=True,  # –°–º–µ—Å—å –ø—É–±–ª–∏—á–Ω—ã—Ö/–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö/–∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
    )


@pytest.fixture
async def user_with_surveys(survey_manager, regular_user):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏."""
    surveys = []
    for i in range(3):
        survey = await survey_manager.create_survey(
            title=f"User Survey {i + 1}",
            description=f"Survey {i + 1} owned by user",
            creator_id=regular_user.id,
        )
        surveys.append(survey)
    return regular_user, surveys


@pytest.fixture
async def admin_with_surveys(survey_manager, admin_user):
    """–ê–¥–º–∏–Ω —Å –æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
    surveys = []
    for i in range(5):
        survey = await survey_manager.create_survey(
            title=f"Admin Survey {i + 1}",
            description=f"Admin survey {i + 1}",
            creator_id=admin_user.id,
        )
        surveys.append(survey)
    return admin_user, surveys


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture
def valid_survey_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞."""
    return {
        "title": "Valid Survey Title",
        "description": "Valid survey description for testing purposes",
        "is_public": True,
        "is_active": True,
        "telegram_notifications": True,
        "allow_anonymous": True,
        "max_responses": 1000,
        "expires_at": None,
    }


@pytest.fixture
def valid_private_survey_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞."""
    return {
        "title": "Private Survey Title",
        "description": "Private survey for testing",
        "is_public": False,
        "is_active": True,
        "telegram_notifications": False,
        "allow_anonymous": False,
        "max_responses": 100,
        "access_password": "test123",
    }


@pytest.fixture
def valid_question_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    return {
        "text": "What is your opinion on this topic?",
        "question_type": "text",
        "is_required": True,
        "order": 1,
        "options": None,
    }


@pytest.fixture
def valid_rating_question_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    return {
        "text": "Rate this from 1 to 5",
        "question_type": "rating",
        "is_required": True,
        "order": 1,
        "min_rating": 1,
        "max_rating": 5,
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@pytest.fixture
def invalid_survey_data():
    """–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –æ—à–∏–±–æ–∫."""
    return {
        "title": "",  # –ü—É—Å—Ç–æ–π title
        "description": None,  # Null description
        "is_public": "invalid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π boolean
        "max_responses": -1,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    }


@pytest.fixture
def invalid_question_data():
    """–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞."""
    return {
        "text": "",  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        "question_type": "invalid_type",
        "order": -1,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        "is_required": "invalid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π boolean
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è edge cases
@pytest.fixture
def edge_case_survey_data():
    """–î–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    return {
        "title": "A" * 200,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        "description": "D" * 2000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        "is_public": True,
        "max_responses": 999999,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤
        "telegram_notifications": True,
        "allow_anonymous": True,
    }


@pytest.fixture
def edge_case_question_data():
    """–í–æ–ø—Ä–æ—Å —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    return {
        "text": "Q" * 500,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞
        "question_type": "text",
        "is_required": True,
        "order": 999,  # –ë–æ–ª—å—à–æ–π –ø–æ—Ä—è–¥–æ–∫
        "help_text": "H" * 1000,  # –î–ª–∏–Ω–Ω—ã–π help text
    }


@pytest.fixture
def unicode_survey_data():
    """–î–∞–Ω–Ω—ã–µ —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏."""
    return {
        "title": "–û–ø—Ä–æ—Å —Å Unicode üôÇ „ÉÜ„Çπ„Éà ÊµãËØï",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üéâ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ √±√°√©√≠√≥√∫",
        "is_public": True,
        "is_active": True,
        "telegram_notifications": True,
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
@pytest.fixture
def concurrent_survey_requests():
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏."""
    return [
        {
            "title": f"Concurrent Survey {i}",
            "description": f"Survey {i} for concurrency testing",
            "is_public": True,
            "is_active": True,
        }
        for i in range(10)
    ]


# –ú–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
@pytest.fixture
def mock_survey_notifications(mock_external_services):
    """–ú–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –æ–ø—Ä–æ—Å–∞—Ö."""
    return mock_external_services.notification_service


@pytest.fixture
def mock_survey_analytics(mock_external_services):
    """–ú–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤."""
    return mock_external_services.analytics_service


@pytest.fixture
def mock_survey_export(mock_external_services):
    """–ú–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–ø—Ä–æ—Å–æ–≤."""
    return mock_external_services.export_service


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def survey_test_utils():
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–µ—Å—Ç–∞—Ö."""

    class SurveyTestUtils:
        @staticmethod
        async def assert_survey_structure(survey_data: Dict[str, Any]):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞."""
            required_fields = [
                "id",
                "title",
                "description",
                "is_public",
                "is_active",
                "created_at",
            ]
            for field in required_fields:
                assert field in survey_data, f"Missing field: {field}"

        @staticmethod
        async def assert_question_structure(question_data: Dict[str, Any]):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞."""
            required_fields = ["id", "text", "question_type", "order", "is_required"]
            for field in required_fields:
                assert field in question_data, f"Missing field: {field}"

        @staticmethod
        async def assert_survey_permissions(survey_data: Dict[str, Any], user_id: int):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø—Ä–æ—Å—É."""
            if not survey_data.get("is_public", False):
                assert (
                    "access_token" in survey_data
                    or survey_data.get("creator_id") == user_id
                )

    return SurveyTestUtils()


# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
@pytest.fixture(params=["public", "private", "inactive"])
async def survey_by_type(request, survey_manager):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø—Ä–æ—Å–æ–≤."""
    if request.param == "public":
        return await survey_manager.create_public_survey()
    elif request.param == "private":
        return await survey_manager.create_private_survey()
    elif request.param == "inactive":
        return await survey_manager.create_inactive_survey()


@pytest.fixture(params=["text", "rating", "choice"])
async def question_by_type(request, question_manager, sample_survey):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤."""
    if request.param == "text":
        return await question_manager.create_text_question(survey_id=sample_survey.id)
    elif request.param == "rating":
        return await question_manager.create_rating_question(survey_id=sample_survey.id)
    elif request.param == "choice":
        return await question_manager.create_choice_question(survey_id=sample_survey.id)


@pytest.fixture(params=[1, 5, 10, 25])
async def survey_with_variable_questions(request, survey_manager):
    """–û–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤."""
    return await survey_manager.create_survey_with_questions(
        question_count=request.param,
        title=f"Survey with {request.param} questions",
    )


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
@pytest.fixture
async def survey_with_responses(survey_manager):
    """–û–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return await survey_manager.create_survey_with_responses(
        response_count=50,
        title="Survey with Responses for Statistics",
    )


@pytest.fixture
async def survey_completion_metrics(survey_manager):
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤."""
    return await survey_manager.create_completion_metrics_data(
        completed=30,
        in_progress=15,
        abandoned=5,
    )
