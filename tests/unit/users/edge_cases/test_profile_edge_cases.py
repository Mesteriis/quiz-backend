"""
–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –æ—Å–æ–±—ã—Ö —É—Å–ª–æ–≤–∏–π:
- –õ–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
- –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö
- –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
"""

import pytest
import asyncio
from httpx import AsyncClient
from datetime import datetime, timedelta
from unittest.mock import patch
from concurrent.futures import ThreadPoolExecutor

from tests.factories import UserFactory, ProfileFactory


class TestProfileSizeLimits:
    """–¢–µ—Å—Ç—ã –ª–∏–º–∏—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."""

    async def test_create_profile_maximum_field_lengths(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–ª–∏–Ω–∞–º–∏ –ø–æ–ª–µ–π."""
        # Arrange - –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–æ–≤
        profile_data = {
            "first_name": "A" * 50,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏
            "last_name": "B" * 50,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–º–∏–ª–∏–∏
            "bio": "C" * 500,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
            "phone": "+1234567890123",  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            "website": "https://" + "w" * 235 + ".com",  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL (255)
            "location": "L" * 100,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
            "job_title": "J" * 100,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            "company": "C" * 100,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            "interests": [
                f"interest{i}" for i in range(30)
            ],  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            "languages": [
                f"l{i:02d}" for i in range(15)
            ],  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤
            "social_links": {
                f"platform{i}": f"user{i}" for i in range(10)
            },  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ü—Å–µ—Ç–µ–π
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert len(data["first_name"]) == 50
        assert len(data["bio"]) == 500
        assert len(data["interests"]) == 30
        assert len(data["languages"]) == 15
        assert len(data["social_links"]) == 10

    async def test_create_profile_exceeding_field_limits(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª–µ–π."""
        # Arrange - –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ª–∏–º–∏—Ç—ã
        profile_data = {
            "first_name": "A" * 51,  # –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–º–µ–Ω–∏
            "bio": "B" * 501,  # –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
            "interests": [
                f"interest{i}" for i in range(31)
            ],  # –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 422
        data = response.json()
        detail_str = str(data["detail"]).lower()
        assert any(field in detail_str for field in ["first_name", "bio", "interests"])

    async def test_create_profile_minimum_valid_data(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        # Arrange - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        profile_data = {
            "first_name": "A"  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ (1 —Å–∏–º–≤–æ–ª)
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert data["first_name"] == "A"
        assert data["last_name"] is None
        assert data["bio"] is None

    async def test_update_profile_large_social_links(
        self, api_client: AsyncClient, user_with_complete_profile
    ):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."""
        # Arrange
        user, profile = user_with_complete_profile

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        large_social_links = {}
        for i in range(20):  # –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            large_social_links[f"platform_{i}"] = f"user_handle_{i}"

        update_data = {"social_links": large_social_links}

        # Act
        api_client.force_authenticate(user=user)
        response = await api_client.put(
            api_client.url_for("update_profile", profile_id=profile.id),
            json=update_data,
        )

        # Assert
        if response.status_code == 422:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            data = response.json()
            assert "social_links" in str(data["detail"]).lower()
        else:
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç, –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ
            assert response.status_code == 200
            data = response.json()
            assert len(data["social_links"]) == 20


class TestProfileSpecialCharacters:
    """–¢–µ—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫."""

    async def test_create_profile_unicode_emoji(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å Unicode –∏ —ç–º–æ–¥–∑–∏."""
        # Arrange
        profile_data = {
            "first_name": "–ê–Ω–Ω–∞ üë©‚Äçüíª",
            "last_name": "–°–º–∏—Ä–Ω–æ–≤–∞ üá∑üá∫",
            "bio": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∫–∞ –∏–∑ –†–æ—Å—Å–∏–∏ üêç Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ üíª –õ—é–±–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚ú®",
            "location": "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è üèôÔ∏è",
            "interests": ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ üíª", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è ‚úàÔ∏è", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è üì∏"],
            "languages": ["ru", "en", "de"],
            "social_links": {"telegram": "@anna_dev üì±", "github": "anna-codes üêô"},
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert "üë©‚Äçüíª" in data["first_name"]
        assert "üá∑üá∫" in data["last_name"]
        assert "üêç" in data["bio"]
        assert "‚ú®" in data["bio"]
        assert "üèôÔ∏è" in data["location"]
        assert "üíª" in data["interests"][0]
        assert "üì±" in data["social_links"]["telegram"]

    async def test_create_profile_special_characters(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        # Arrange
        profile_data = {
            "first_name": "Marie-Jos√©",
            "last_name": "O'Connor-Smith",
            "bio": "D√©veloppeur & Designer @ Tech Co. (2019-2024) - Sp√©cialis√© en UX/UI",
            "location": "S√£o Paulo, Brazil",
            "phone": "+55 (11) 98765-4321",
            "website": "https://marie-jos√©.dev",
            "social_links": {
                "linkedin": "marie-jos√©-o'connor",
                "email": "marie.jos√©@example.com",
            },
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert data["first_name"] == "Marie-Jos√©"
        assert data["last_name"] == "O'Connor-Smith"
        assert "D√©veloppeur" in data["bio"]
        assert "S√£o Paulo" in data["location"]
        assert "marie-jos√©" in data["social_links"]["linkedin"]

    async def test_create_profile_html_xss_attempt(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–ø—ã—Ç–∫–æ–π XSS —á–µ—Ä–µ–∑ HTML."""
        # Arrange
        profile_data = {
            "first_name": "<script>alert('XSS')</script>John",
            "bio": "<img src=x onerror=alert('XSS')>Developer bio",
            "website": "javascript:alert('XSS')",
            "social_links": {"twitter": "<script>alert('XSS')</script>username"},
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        if response.status_code == 201:
            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω
            data = response.json()
            assert "<script>" not in data["first_name"]
            assert "<img" not in data["bio"]
            assert "javascript:" not in data["website"]
        else:
            # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ
            assert response.status_code == 422

    async def test_create_profile_sql_injection_attempt(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–ø—ã—Ç–∫–æ–π SQL –∏–Ω—ä–µ–∫—Ü–∏–∏."""
        # Arrange
        profile_data = {
            "first_name": "'; DROP TABLE profiles; --",
            "bio": "1' OR '1'='1",
            "location": "' UNION SELECT * FROM users --",
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        # SQL –∏–Ω—ä–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ ORM
        if response.status_code == 201:
            data = response.json()
            # –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
            assert data["first_name"] == "'; DROP TABLE profiles; --"
        # –ò–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        else:
            assert response.status_code in [400, 422]


class TestProfileConcurrency:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π."""

    async def test_concurrent_profile_updates(
        self, api_client: AsyncClient, user_with_complete_profile
    ):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
        # Arrange
        user, profile = user_with_complete_profile

        async def update_profile(field_name: str, value: str):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
            client = api_client
            client.force_authenticate(user=user)

            update_data = {field_name: value}
            response = await client.put(
                client.url_for("update_profile", profile_id=profile.id),
                json=update_data,
            )
            return response

        # Act - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        tasks = [
            update_profile("first_name", "Updated1"),
            update_profile("last_name", "Updated2"),
            update_profile("bio", "Updated bio"),
            update_profile("location", "Updated location"),
            update_profile("phone", "+1111111111"),
        ]

        responses = await asyncio.gather(*tasks, return_exceptions=True)

        # Assert
        success_count = 0
        for response in responses:
            if not isinstance(response, Exception) and response.status_code == 200:
                success_count += 1

        # –•–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º
        assert success_count >= 1

    async def test_concurrent_profile_creation_same_user(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        # Arrange
        async def create_profile(suffix: str):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."""
            client = api_client
            client.force_authenticate(user=basic_user)

            profile_data = {"first_name": f"Test{suffix}"}
            response = await client.post(
                client.url_for("create_profile"), json=profile_data
            )
            return response

        # Act - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        tasks = [create_profile("1"), create_profile("2"), create_profile("3")]

        responses = await asyncio.gather(*tasks, return_exceptions=True)

        # Assert
        success_count = 0
        conflict_count = 0

        for response in responses:
            if not isinstance(response, Exception):
                if response.status_code == 201:
                    success_count += 1
                elif response.status_code == 409:  # Conflict
                    conflict_count += 1

        # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω
        assert success_count == 1
        assert conflict_count >= 1

    async def test_profile_optimistic_locking(
        self, api_client: AsyncClient, user_with_complete_profile
    ):
        """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        # Arrange
        user, profile = user_with_complete_profile

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        api_client.force_authenticate(user=user)
        response1 = await api_client.get(api_client.url_for("get_my_profile"))
        assert response1.status_code == 200
        current_version = response1.json().get("version", 1)

        # Act - –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–µ–π
        update_data = {
            "first_name": "Updated",
            "version": current_version - 1,  # —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è
        }

        response2 = await api_client.put(
            api_client.url_for("update_profile", profile_id=profile.id),
            json=update_data,
        )

        # Assert
        if "version" in update_data:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            assert response2.status_code == 409  # Conflict
            data = response2.json()
            assert (
                "version" in str(data["detail"]).lower()
                or "conflict" in str(data["detail"]).lower()
            )
        else:
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
            assert response2.status_code == 200


class TestProfilePerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π."""

    async def test_bulk_profile_retrieval(
        self, api_client: AsyncClient, admin_user, multiple_users_with_profiles
    ):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        # Arrange
        users_and_profiles = multiple_users_with_profiles
        user_ids = [user.id for user, _ in users_and_profiles]

        # Act
        api_client.force_authenticate(user=admin_user)
        start_time = datetime.utcnow()

        response = await api_client.post(
            api_client.url_for("bulk_get_profiles"), json={"user_ids": user_ids}
        )

        end_time = datetime.utcnow()
        response_time = (end_time - start_time).total_seconds()

        # Assert
        assert response.status_code == 200
        data = response.json()
        assert len(data["profiles"]) == len(user_ids)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥)
        assert response_time < 2.0

    async def test_profile_search_performance(
        self, api_client: AsyncClient, admin_user
    ):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        # Arrange
        search_queries = ["John", "Developer", "Moscow", "Python", "john@example.com"]

        # Act
        api_client.force_authenticate(user=admin_user)
        response_times = []

        for query in search_queries:
            start_time = datetime.utcnow()

            response = await api_client.get(
                api_client.url_for("search_profiles"),
                params={"query": query, "limit": 100},
            )

            end_time = datetime.utcnow()
            response_time = (end_time - start_time).total_seconds()
            response_times.append(response_time)

            assert response.status_code == 200

        # Assert
        # –í—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        avg_response_time = sum(response_times) / len(response_times)
        assert avg_response_time < 1.0  # –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ä–µ–¥–Ω–µ–º
        assert max(response_times) < 2.0  # –º–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã

    async def test_profile_pagination_large_dataset(
        self, api_client: AsyncClient, admin_user
    ):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö."""
        # Arrange
        large_page_size = 1000

        # Act
        api_client.force_authenticate(user=admin_user)
        start_time = datetime.utcnow()

        response = await api_client.get(
            api_client.url_for("list_profiles"),
            params={"page": 1, "size": large_page_size},
        )

        end_time = datetime.utcnow()
        response_time = (end_time - start_time).total_seconds()

        # Assert
        assert response.status_code == 200
        data = response.json()
        assert "profiles" in data
        assert "pagination" in data
        # –î–∞–∂–µ –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
        assert response_time < 3.0


class TestProfileEdgeDates:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –¥–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö."""

    async def test_create_profile_very_old_birth_date(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è."""
        # Arrange
        profile_data = {
            "first_name": "Ancient",
            "birth_date": "1900-01-01",  # –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert data["birth_date"] == "1900-01-01"

    async def test_create_profile_recent_birth_date(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–µ–¥–∞–≤–Ω–µ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π)."""
        # Arrange
        recent_date = (datetime.utcnow() - timedelta(days=365 * 10)).strftime(
            "%Y-%m-%d"
        )  # 10 –ª–µ—Ç –Ω–∞–∑–∞–¥
        profile_data = {"first_name": "Young", "birth_date": recent_date}

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        if response.status_code == 201:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö
            data = response.json()
            assert data["birth_date"] == recent_date
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            assert response.status_code == 422
            data = response.json()
            assert (
                "age" in str(data["detail"]).lower()
                or "birth_date" in str(data["detail"]).lower()
            )

    async def test_create_profile_leap_year_date(
        self, api_client: AsyncClient, basic_user
    ):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –¥–∞—Ç–æ–π 29 —Ñ–µ–≤—Ä–∞–ª—è –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞."""
        # Arrange
        profile_data = {
            "first_name": "Leap",
            "birth_date": "2000-02-29",  # 29 —Ñ–µ–≤—Ä–∞–ª—è –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞
        }

        # Act
        api_client.force_authenticate(user=basic_user)
        response = await api_client.post(
            api_client.url_for("create_profile"), json=profile_data
        )

        # Assert
        assert response.status_code == 201
        data = response.json()
        assert data["birth_date"] == "2000-02-29"

    async def test_update_profile_timezone_edge_cases(
        self, api_client: AsyncClient, user_with_complete_profile
    ):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏."""
        # Arrange
        user, profile = user_with_complete_profile

        edge_timezones = [
            "UTC",
            "Pacific/Kiritimati",  # UTC+14 (—Å–∞–º–∞—è –≤–æ—Å—Ç–æ—á–Ω–∞—è –∑–æ–Ω–∞)
            "Pacific/Midway",  # UTC-11 (–æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –∑–∞–ø–∞–¥–Ω—ã—Ö)
            "Asia/Kathmandu",  # UTC+5:45 (–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ)
            "Australia/Adelaide",  # UTC+9:30 (–¥—Ä—É–≥–æ–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ)
        ]

        # Act & Assert
        api_client.force_authenticate(user=user)

        for timezone in edge_timezones:
            update_data = {"timezone": timezone}
            response = await api_client.put(
                api_client.url_for("update_profile", profile_id=profile.id),
                json=update_data,
            )

            assert response.status_code == 200
            data = response.json()
            assert data["timezone"] == timezone
