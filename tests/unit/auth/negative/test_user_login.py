"""
Negative —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã –æ—à–∏–±–æ—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤—Ö–æ–¥–∞:
–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã,
–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.
"""

import pytest


class TestUserLoginNegative:
    """Negative —Ç–µ—Å—Ç—ã –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @pytest.mark.asyncio
    async def test_login_nonexistent_user(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        login_data = {"identifier": "nonexistent_user"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
        assert (
            "not found" in data["detail"].lower() or "invalid" in data["detail"].lower()
        )

    @pytest.mark.asyncio
    async def test_login_nonexistent_email(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email."""
        # Arrange
        login_data = {"identifier": "nonexistent@example.com"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
        assert (
            "not found" in data["detail"].lower() or "invalid" in data["detail"].lower()
        )

    @pytest.mark.asyncio
    async def test_login_nonexistent_telegram_id(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Telegram ID."""
        # Arrange
        login_data = {"telegram_id": 999999999}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
        assert (
            "not found" in data["detail"].lower() or "invalid" in data["detail"].lower()
        )

    @pytest.mark.asyncio
    async def test_login_inactive_user(self, api_client, db_session, inactive_user):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        login_data = {"identifier": inactive_user.username}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
        assert (
            "inactive" in data["detail"].lower() or "disabled" in data["detail"].lower()
        )

    @pytest.mark.asyncio
    async def test_login_empty_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {"identifier": ""}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_missing_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_null_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ null –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {"identifier": None}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_invalid_email_format(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ email."""
        # Arrange
        login_data = {"identifier": "invalid-email-format"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_invalid_telegram_id_format(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Telegram ID."""
        # Arrange
        login_data = {"telegram_id": "invalid_id"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_negative_telegram_id(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Telegram ID."""
        # Arrange
        login_data = {"telegram_id": -123456789}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_malformed_json(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON."""
        # Act
        response = await api_client.post(
            "/api/auth/login",
            data="invalid json",
            headers={"Content-Type": "application/json"},
        )

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_empty_body(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞."""
        # Act
        response = await api_client.post("/api/auth/login", json={})

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_sql_injection_attempt(self, api_client, db_session):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π."""
        # Arrange
        login_data = {"identifier": "'; DROP TABLE users; --"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_xss_attempt(self, api_client, db_session):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫."""
        # Arrange
        login_data = {"identifier": "<script>alert('xss')</script>"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_extra_fields(self, api_client, db_session, regular_user):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π."""
        # Arrange
        login_data = {
            "identifier": regular_user.username,
            "unknown_field": "should be ignored",
            "another_field": 123,
        }

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ 200 (–µ—Å–ª–∏ –ø–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è), –ª–∏–±–æ 422 (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
        assert response.status_code in [200, 422]

        if response.status_code == 200:
            data = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –æ—Ç–≤–µ—Ç
            assert "unknown_field" not in data
            assert "another_field" not in data

    @pytest.mark.asyncio
    async def test_login_whitespace_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤."""
        # Arrange
        login_data = {"identifier": "   "}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_very_long_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {"identifier": "a" * 1000}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_unicode_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ Unicode –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {"identifier": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüôÇ"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_case_sensitive_username(
        self, api_client, db_session, regular_user
    ):
        """–¢–µ—Å—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è username."""
        # Arrange
        login_data = {"identifier": regular_user.username.upper()}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ 200 (–µ—Å–ª–∏ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å—Ç—å), —Ç–∞–∫ –∏ 401 (–µ—Å–ª–∏ –Ω–µ—Ç)
        if response.status_code == 401:
            data = response.json()
            assert "detail" in data
            assert (
                "not found" in data["detail"].lower()
                or "invalid" in data["detail"].lower()
            )

    @pytest.mark.asyncio
    async def test_login_concurrent_invalid_attempts(self, api_client, db_session):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞."""
        # Arrange
        login_data = {"identifier": "nonexistent_user"}

        # Act - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        responses = []
        for _ in range(5):
            response = await api_client.post("/api/auth/login", json=login_data)
            responses.append(response)

        # Assert
        for response in responses:
            assert response.status_code == 401
            data = response.json()
            assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_rate_limiting(self, api_client, db_session):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫ (rate limiting)."""
        # Arrange
        login_data = {"identifier": "nonexistent_user"}

        # Act - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting
        responses = []
        for _ in range(10):
            response = await api_client.post("/api/auth/login", json=login_data)
            responses.append(response)

        # Assert
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (429) –∏–ª–∏ –≤—Å–µ –º–æ–≥—É—Ç –±—ã—Ç—å 401
        for response in responses:
            assert response.status_code in [401, 429]
            data = response.json()
            assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_mixed_identifier_types(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        # Arrange
        login_data = {
            "identifier": "testuser",
            "telegram_id": 123456789,  # –û–±–∞ –ø–æ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        }

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ 422 (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ), –ª–∏–±–æ 200/401 (–µ—Å–ª–∏ –æ–¥–∏–Ω –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
        assert response.status_code in [200, 401, 422]

    @pytest.mark.asyncio
    async def test_login_special_characters_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö –≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ."""
        # Arrange
        login_data = {"identifier": "user@#$%^&*()"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_newline_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏."""
        # Arrange
        login_data = {"identifier": "user\nname"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_login_tab_identifier(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π."""
        # Arrange
        login_data = {"identifier": "user\tname"}

        # Act
        response = await api_client.post("/api/auth/login", json=login_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data


class TestJWTTokensNegative:
    """Negative —Ç–µ—Å—Ç—ã –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤."""

    @pytest.mark.asyncio
    async def test_invalid_token_access(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ç–æ–∫–µ–Ω–µ."""
        # Arrange
        headers = {"Authorization": "Bearer invalid_token"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_missing_token_access(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º —Ç–æ–∫–µ–Ω–µ."""
        # Act
        response = await api_client.get("/api/auth/profile")

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_malformed_authorization_header(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization."""
        # Arrange
        headers = {"Authorization": "InvalidBearerToken"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_expired_token_access(
        self, api_client, db_session, expired_auth_headers
    ):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ–∫—à–µ–º —Ç–æ–∫–µ–Ω–µ."""
        # Act
        response = await api_client.get(
            "/api/auth/profile", headers=expired_auth_headers
        )

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
        assert (
            "expired" in data["detail"].lower() or "invalid" in data["detail"].lower()
        )

    @pytest.mark.asyncio
    async def test_tampered_token_access(self, api_client, db_session, regular_user):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–¥–¥–µ–ª–∞–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ."""
        # Arrange
        from services.jwt_service import jwt_service

        valid_token = jwt_service.create_access_token(regular_user.id)
        tampered_token = valid_token[:-5] + "tampr"  # –ò–∑–º–µ–Ω—è–µ–º –∫–æ–Ω–µ—Ü —Ç–æ–∫–µ–Ω–∞
        headers = {"Authorization": f"Bearer {tampered_token}"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_token_without_bearer_prefix(
        self, api_client, db_session, regular_user
    ):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–æ–∫–µ–Ω–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ Bearer."""
        # Arrange
        from services.jwt_service import jwt_service

        valid_token = jwt_service.create_access_token(regular_user.id)
        headers = {"Authorization": valid_token}  # –ë–µ–∑ "Bearer "

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_empty_bearer_token(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º Bearer —Ç–æ–∫–µ–Ω–µ."""
        # Arrange
        headers = {"Authorization": "Bearer "}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_refresh_token_as_access_token(
        self, api_client, db_session, regular_user
    ):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ refresh —Ç–æ–∫–µ–Ω–∞ –∫–∞–∫ access."""
        # Arrange
        login_data = {"identifier": regular_user.username}
        login_response = await api_client.post("/api/auth/login", json=login_data)
        refresh_token = login_response.json()["refresh_token"]
        headers = {"Authorization": f"Bearer {refresh_token}"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_invalid_refresh_token(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º refresh —Ç–æ–∫–µ–Ω–µ."""
        # Arrange
        refresh_data = {"refresh_token": "invalid_refresh_token"}

        # Act
        response = await api_client.post("/api/auth/refresh", json=refresh_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_missing_refresh_token(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º refresh —Ç–æ–∫–µ–Ω–µ."""
        # Act
        response = await api_client.post("/api/auth/refresh", json={})

        # Assert
        assert response.status_code == 422
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_expired_refresh_token(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å—Ç–µ–∫—à–µ–º refresh —Ç–æ–∫–µ–Ω–µ."""
        # Arrange
        from services.jwt_service import jwt_service

        expired_refresh = jwt_service.create_refresh_token(999, expires_delta=-3600)
        refresh_data = {"refresh_token": expired_refresh}

        # Act
        response = await api_client.post("/api/auth/refresh", json=refresh_data)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_reuse_refresh_token(self, api_client, db_session, regular_user):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ refresh —Ç–æ–∫–µ–Ω–∞."""
        # Arrange
        login_data = {"identifier": regular_user.username}
        login_response = await api_client.post("/api/auth/login", json=login_data)
        refresh_token = login_response.json()["refresh_token"]

        # Act - –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        first_response = await api_client.post(
            "/api/auth/refresh", json={"refresh_token": refresh_token}
        )
        assert first_response.status_code == 200

        # Act - –≤—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Ç–æ–∫–µ–Ω–∞
        second_response = await api_client.post(
            "/api/auth/refresh", json={"refresh_token": refresh_token}
        )

        # Assert
        assert second_response.status_code == 401
        data = second_response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_token_for_nonexistent_user(self, api_client, db_session):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        from services.jwt_service import jwt_service

        token_for_nonexistent = jwt_service.create_access_token(999999)
        headers = {"Authorization": f"Bearer {token_for_nonexistent}"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data

    @pytest.mark.asyncio
    async def test_token_for_inactive_user(self, api_client, db_session, inactive_user):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # Arrange
        from services.jwt_service import jwt_service

        token = jwt_service.create_access_token(inactive_user.id)
        headers = {"Authorization": f"Bearer {token}"}

        # Act
        response = await api_client.get("/api/auth/profile", headers=headers)

        # Assert
        assert response.status_code == 401
        data = response.json()
        assert "detail" in data
