"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
—Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—è JWT, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é,
Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import pytest
from typing import Dict, Any, Optional, Callable
from unittest.mock import AsyncMock, MagicMock

# –ò–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫ –¥–ª—è auth –¥–æ–º–µ–Ω–∞
from tests.factories import (
    UserFactory,
    AdminUserFactory,
    TelegramUserFactory,
    InactiveUserFactory,
    VerifiedUserFactory,
    UserWithBioFactory,
    ProfileFactory,
    CompleteProfileFactory,
    TelegramProfileFactory,
    UserDataFactory,
    TelegramUserDataFactory,
    create_user_with_responses,
    create_test_users_batch,
    create_profile_for_user,
    create_telegram_synced_profile,
)

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
from services.jwt_service import jwt_service
from services.user_service import user_service
from services.telegram_service import telegram_service


@pytest.fixture
def auth_user_factory():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth —Ç–µ—Å—Ç–∞—Ö."""
    return UserFactory


@pytest.fixture
def admin_user_factory():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –≤ auth —Ç–µ—Å—Ç–∞—Ö."""
    return AdminUserFactory


@pytest.fixture
def telegram_user_factory():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth —Ç–µ—Å—Ç–∞—Ö."""
    return TelegramUserFactory


@pytest.fixture
def inactive_user_factory():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth —Ç–µ—Å—Ç–∞—Ö."""
    return InactiveUserFactory


@pytest.fixture
async def regular_user(auth_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await auth_user_factory.create()
    await db_session.commit()
    return user


@pytest.fixture
async def admin_user(admin_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    user = await admin_user_factory.create()
    await db_session.commit()
    return user


@pytest.fixture
async def telegram_user(telegram_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await telegram_user_factory.create()
    await db_session.commit()
    return user


@pytest.fixture
async def inactive_user(inactive_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await inactive_user_factory.create()
    await db_session.commit()
    return user


@pytest.fixture
async def user_with_profile(auth_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º."""
    user = await auth_user_factory.create()
    profile = await create_profile_for_user(user)
    await db_session.commit()
    return user, profile


@pytest.fixture
async def telegram_user_with_profile(telegram_user_factory, db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º."""
    user = await telegram_user_factory.create()
    profile = await create_telegram_synced_profile(user)
    await db_session.commit()
    return user, profile


@pytest.fixture
def auth_headers_factory():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""

    def _create_auth_headers(user_id: int) -> Dict[str, str]:
        access_token = jwt_service.create_access_token(user_id)
        return {"Authorization": f"Bearer {access_token}"}

    return _create_auth_headers


@pytest.fixture
def invalid_auth_headers():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    return {"Authorization": "Bearer invalid_token"}


@pytest.fixture
def expired_auth_headers():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    expired_token = jwt_service.create_access_token(999, expires_delta=-3600)
    return {"Authorization": f"Bearer {expired_token}"}


@pytest.fixture
def malformed_auth_headers():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤."""
    return {"Authorization": "InvalidBearerToken"}


@pytest.fixture
def mock_jwt_service():
    """–ú–æ–∫ –¥–ª—è JWT —Å–µ—Ä–≤–∏—Å–∞."""
    mock = MagicMock()
    mock.create_access_token = MagicMock(return_value="mock_access_token")
    mock.create_refresh_token = MagicMock(return_value="mock_refresh_token")
    mock.decode_token = MagicMock(return_value={"user_id": 1, "exp": 9999999999})
    mock.verify_token = MagicMock(return_value=True)
    return mock


@pytest.fixture
def mock_user_service():
    """–ú–æ–∫ –¥–ª—è User —Å–µ—Ä–≤–∏—Å–∞."""
    mock = AsyncMock()
    mock.create_user = AsyncMock()
    mock.get_user_by_id = AsyncMock()
    mock.get_user_by_username = AsyncMock()
    mock.get_user_by_email = AsyncMock()
    mock.get_user_by_telegram_id = AsyncMock()
    mock.update_user = AsyncMock()
    mock.verify_user = AsyncMock()
    mock.get_users_list = AsyncMock()
    return mock


@pytest.fixture
def mock_telegram_service():
    """–ú–æ–∫ –¥–ª—è Telegram —Å–µ—Ä–≤–∏—Å–∞."""
    mock = AsyncMock()
    mock.verify_telegram_data = AsyncMock(return_value=True)
    mock.get_user_info = AsyncMock()
    mock.send_message = AsyncMock()
    mock.create_webhook = AsyncMock()
    return mock


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è positive —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def valid_registration_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    return {
        "username": "testuser",
        "email": "test@example.com",
        "first_name": "Test",
        "last_name": "User",
        "language": "en",
        "timezone": "UTC",
    }


@pytest.fixture
def valid_login_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞."""
    return {"identifier": "testuser"}


@pytest.fixture
def valid_telegram_auth_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    return {
        "telegram_id": 123456789,
        "telegram_username": "testuser",
        "telegram_first_name": "Test",
        "telegram_last_name": "User",
        "auth_date": 1234567890,
        "hash": "valid_hash",
    }


@pytest.fixture
def valid_profile_update_data():
    """–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    return {
        "first_name": "Updated",
        "last_name": "Name",
        "bio": "Updated bio",
        "location": "Updated location",
        "language": "ru",
        "timezone": "Europe/Moscow",
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è negative —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def invalid_registration_data():
    """–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    return {
        "username": "",  # –ü—É—Å—Ç–æ–π username
        "email": "invalid-email",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
        "first_name": "",
        "last_name": "",
    }


@pytest.fixture
def invalid_login_data():
    """–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞."""
    return {"identifier": ""}


@pytest.fixture
def invalid_telegram_auth_data():
    """–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    return {
        "telegram_id": "invalid_id",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID
        "auth_date": "invalid_date",  # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
        "hash": "invalid_hash",
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è edge cases
@pytest.fixture
def edge_case_registration_data():
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    return {
        "username": "a" * 150,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π username
        "email": "a" * 100 + "@example.com",  # –î–ª–∏–Ω–Ω—ã–π email
        "first_name": "–ò–º—è",  # Unicode —Å–∏–º–≤–æ–ª—ã
        "last_name": "–§–∞–º–∏–ª–∏—è",
        "language": "zh-CN",  # –ù–µ–æ–±—ã—á–Ω—ã–π —è–∑—ã–∫
        "timezone": "Pacific/Kiritimati",  # –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    }


@pytest.fixture
def edge_case_telegram_data():
    """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è Telegram."""
    return {
        "telegram_id": 2**31 - 1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π ID
        "telegram_username": "a" * 32,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ username
        "telegram_first_name": "üôÇ" * 20,  # –≠–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏
        "telegram_last_name": None,  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ–∞–º–∏–ª–∏—è
        "photo_url": "https://example.com/very/long/photo/url/" + "a" * 200,
    }


@pytest.fixture
async def users_batch(db_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    users = await create_test_users_batch(count=25)
    await db_session.commit()
    return users


@pytest.fixture
def concurrent_requests_data():
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    return [
        {
            "username": f"user_{i}",
            "email": f"user_{i}@example.com",
            "first_name": f"User{i}",
            "last_name": "Test",
        }
        for i in range(10)
    ]


# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
@pytest.fixture(params=["username", "email", "telegram_id"])
def login_identifier_type(request):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ."""
    return request.param


@pytest.fixture(
    params=[
        {"language": "en", "timezone": "UTC"},
        {"language": "ru", "timezone": "Europe/Moscow"},
        {"language": "zh-CN", "timezone": "Asia/Shanghai"},
    ]
)
def localization_params(request):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."""
    return request.param


@pytest.fixture(params=["regular_user", "admin_user", "telegram_user", "inactive_user"])
def user_type(request):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    return request.param
