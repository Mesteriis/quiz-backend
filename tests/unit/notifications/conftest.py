"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ–º–µ–Ω–∞ notifications.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
- –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –ú–æ–∫–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ù–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
from typing import Dict, Any, List

from tests.factories import UserFactory


@pytest.fixture
async def verified_user(async_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_factory = UserFactory(async_session)
    user = await user_factory.create(
        username="verified_user",
        email="verified@example.com",
        is_verified=True,
        is_active=True,
        is_admin=False,
        created_at=datetime.utcnow(),
    )
    return user


@pytest.fixture
async def admin_user(async_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_factory = UserFactory(async_session)
    admin = await user_factory.create(
        username="admin_user",
        email="admin@example.com",
        is_verified=True,
        is_active=True,
        is_admin=True,
        is_superuser=True,
        created_at=datetime.utcnow(),
    )
    return admin


@pytest.fixture
async def premium_user(async_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_factory = UserFactory(async_session)
    user = await user_factory.create(
        username="premium_user",
        email="premium@example.com",
        is_verified=True,
        is_active=True,
        user_type="premium",
        subscription_active=True,
        created_at=datetime.utcnow(),
    )
    return user


@pytest.fixture
async def inactive_user(async_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_factory = UserFactory(async_session)
    user = await user_factory.create(
        username="inactive_user",
        email="inactive@example.com",
        is_verified=True,
        is_active=False,
        last_login=datetime.utcnow() - timedelta(days=60),
        created_at=datetime.utcnow() - timedelta(days=90),
    )
    return user


@pytest.fixture
async def new_user(async_session):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_factory = UserFactory(async_session)
    user = await user_factory.create(
        username="new_user",
        email="new@example.com",
        is_verified=True,
        is_active=True,
        created_at=datetime.utcnow() - timedelta(days=2),
    )
    return user


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@pytest.fixture
def system_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    return {
        "type": "system_message",
        "title": "System Update",
        "message": "The system has been updated with new features and improvements",
        "channels": ["websocket", "email"],
        "data": {
            "update_version": "1.2.3",
            "features": ["new_dashboard", "improved_performance"],
            "maintenance_scheduled": False,
        },
    }


@pytest.fixture
def survey_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ–ø—Ä–æ—Å–µ."""
    return {
        "type": "survey_completed",
        "title": "Survey Completed",
        "message": "Thank you for completing the customer satisfaction survey",
        "channels": ["websocket", "push"],
        "data": {
            "survey_id": "survey_123",
            "completion_time": "2024-01-15T14:30:00Z",
            "score": 85,
            "rewards_earned": 100,
        },
    }


@pytest.fixture
def reminder_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    return {
        "type": "reminder",
        "title": "Survey Reminder",
        "message": "Don't forget to complete your weekly survey",
        "channels": ["push", "email"],
        "data": {
            "reminder_type": "weekly_survey",
            "due_date": "2024-01-20T23:59:59Z",
            "survey_link": "https://app.com/surveys/weekly",
            "priority": "normal",
        },
    }


@pytest.fixture
def achievement_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è."""
    return {
        "type": "achievement_unlocked",
        "title": "Achievement Unlocked!",
        "message": "Congratulations! You've completed 10 surveys this month",
        "channels": ["websocket", "push"],
        "data": {
            "achievement_id": "survey_master_10",
            "badge_icon": "üèÜ",
            "points_earned": 500,
            "next_milestone": 25,
            "rarity": "rare",
        },
    }


@pytest.fixture
def announcement_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    return {
        "type": "announcement",
        "title": "Platform Maintenance",
        "message": "The platform will be under maintenance tomorrow from 2-4 AM UTC",
        "channels": ["websocket", "email", "push"],
        "data": {
            "maintenance_start": "2024-01-16T02:00:00Z",
            "maintenance_end": "2024-01-16T04:00:00Z",
            "affected_services": ["surveys", "analytics"],
            "severity": "medium",
        },
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@pytest.fixture
def push_subscription_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö push –ø–æ–¥–ø–∏—Å–∫–∏."""
    return {
        "subscription": {
            "endpoint": "https://fcm.googleapis.com/fcm/send/example_endpoint_id",
            "keys": {
                "p256dh": "example_p256dh_key_base64_encoded",
                "auth": "example_auth_key_base64_encoded",
            },
        },
        "categories": ["surveys", "reminders", "announcements"],
        "device_info": {
            "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "platform": "web",
            "device_type": "desktop",
            "app_version": "1.2.3",
        },
    }


@pytest.fixture
def mobile_push_subscription_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω–æ–π push –ø–æ–¥–ø–∏—Å–∫–∏."""
    return {
        "subscription": {
            "endpoint": "https://fcm.googleapis.com/fcm/send/mobile_endpoint_id",
            "keys": {
                "p256dh": "mobile_p256dh_key_base64_encoded",
                "auth": "mobile_auth_key_base64_encoded",
            },
        },
        "categories": ["surveys", "reminders", "achievements"],
        "device_info": {
            "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X)",
            "platform": "iOS",
            "device_type": "mobile",
            "app_version": "1.2.3",
        },
    }


@pytest.fixture
def push_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    return {
        "title": "New Survey Available",
        "body": "A new survey is available for you to complete",
        "image": "https://app.com/images/survey_notification.png",
        "icon": "https://app.com/images/icons/survey.png",
        "data": {
            "survey_id": "survey_456",
            "category": "surveys",
            "action_url": "/surveys/survey_456",
            "expires_at": "2024-01-25T23:59:59Z",
        },
    }


@pytest.fixture
def vapid_key_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö VAPID –∫–ª—é—á–∞."""
    return {
        "public_key": "BExample_valid_vapid_public_key_string_that_is_base64_encoded",
        "algorithm": "ES256",
        "created_at": "2024-01-01T00:00:00Z",
        "expires_at": "2025-01-01T00:00:00Z",
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@pytest.fixture
def notification_statistics_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return {
        "total_notifications_sent": 50000,
        "total_notifications_delivered": 48500,
        "total_notifications_opened": 15000,
        "delivery_rate": 97.0,
        "open_rate": 30.9,
        "active_subscriptions": 2500,
        "channels": {
            "websocket": {"sent": 20000, "delivered": 19800, "success_rate": 99.0},
            "email": {"sent": 15000, "delivered": 14250, "success_rate": 95.0},
            "push": {"sent": 12000, "delivered": 11500, "success_rate": 95.8},
            "sms": {"sent": 3000, "delivered": 2950, "success_rate": 98.3},
        },
    }


@pytest.fixture
def user_notification_history() -> List[Dict[str, Any]]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return [
        {
            "id": "notif_1",
            "type": "system_message",
            "title": "Welcome to the Platform",
            "message": "Welcome! We're excited to have you on board",
            "created_at": "2024-01-15T10:00:00Z",
            "read": False,
            "channel": "websocket",
            "data": {"welcome_bonus": 100},
        },
        {
            "id": "notif_2",
            "type": "survey_completed",
            "title": "Survey Complete",
            "message": "Thank you for completing the survey",
            "created_at": "2024-01-14T15:30:00Z",
            "read": True,
            "channel": "push",
            "data": {"survey_id": "survey_123", "points": 50},
        },
        {
            "id": "notif_3",
            "type": "reminder",
            "title": "Survey Reminder",
            "message": "You have a pending survey to complete",
            "created_at": "2024-01-13T09:00:00Z",
            "read": False,
            "channel": "email",
            "data": {"survey_id": "survey_456", "due_date": "2024-01-20T23:59:59Z"},
        },
    ]


@pytest.fixture
def invalid_notification_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    return {
        "type": "",  # –ü—É—Å—Ç–æ–π —Ç–∏–ø
        "title": "A" * 300,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "message": "",  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "channels": ["invalid_channel"],  # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª
        "data": {
            "malicious_script": "<script>alert('xss')</script>",
            "sql_injection": "'; DROP TABLE users; --",
        },
    }


@pytest.fixture
def malformed_push_subscription_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö push –ø–æ–¥–ø–∏—Å–∫–∏."""
    return {
        "subscription": {
            "endpoint": "invalid_endpoint_url",
            "keys": {
                "p256dh": "invalid_key",
                # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth –∫–ª—é—á
            },
        },
        "categories": ["invalid_category"],
        "device_info": {
            "user_agent": "",
            "platform": "unknown",
            "device_type": "invalid",
        },
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
@pytest.fixture
def mock_notification_service():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    with patch(
        "src.services.realtime_notifications.get_notification_service"
    ) as mock_service:
        mock_notification_service = MagicMock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        mock_notification_service.send_notification = AsyncMock(
            return_value={"success": True, "notification_id": "test_notif_123"}
        )
        mock_notification_service.get_user_notifications = AsyncMock(return_value=[])
        mock_notification_service.get_statistics = AsyncMock(return_value={})
        mock_notification_service.broadcast_notification = AsyncMock(
            return_value={"sent_count": 100, "failed_count": 5}
        )
        mock_notification_service.clear_user_notifications = AsyncMock(
            return_value={"cleared_count": 10}
        )

        mock_service.return_value = mock_notification_service
        yield mock_notification_service


@pytest.fixture
def mock_push_service():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ push —Å–µ—Ä–≤–∏—Å–∞."""
    with patch("src.routers.push_notifications.push_service") as mock_service:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        mock_service.get_vapid_public_key.return_value = (
            "BExample_valid_vapid_public_key"
        )
        mock_service.send_to_user = AsyncMock(
            return_value={"success": True, "sent_count": 1, "failed_count": 0}
        )
        mock_service.send_to_all = AsyncMock(
            return_value={"success": True, "sent_count": 1000, "failed_count": 25}
        )
        mock_service.get_analytics_stats = AsyncMock(return_value={})
        mock_service.validate_subscriptions = AsyncMock(
            return_value={"valid_count": 500, "invalid_count": 10}
        )

        yield mock_service


@pytest.fixture
def mock_push_subscription_repository():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è push –ø–æ–¥–ø–∏—Å–æ–∫."""
    with patch(
        "src.routers.push_notifications.get_push_subscription_repository"
    ) as mock_repo:
        mock_subscription_repo = MagicMock()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        mock_subscription = MagicMock()
        mock_subscription.id = 123
        mock_subscription_repo.create_subscription = AsyncMock(
            return_value=mock_subscription
        )
        mock_subscription_repo.get_user_subscriptions = AsyncMock(return_value=[])
        mock_subscription_repo.delete_user_subscriptions = AsyncMock(return_value=1)
        mock_subscription_repo.update_categories = AsyncMock(return_value=True)
        mock_subscription_repo.cleanup_expired = AsyncMock(
            return_value={"removed_count": 5}
        )

        mock_repo.return_value = mock_subscription_repo
        yield mock_subscription_repo


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤
@pytest.fixture
def websocket_channel_config() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ WebSocket –∫–∞–Ω–∞–ª–∞."""
    return {
        "channel": "websocket",
        "enabled": True,
        "max_connections": 1000,
        "timeout": 30,
        "retry_attempts": 3,
        "supported_types": [
            "system_message",
            "survey_completed",
            "reminder",
            "achievement_unlocked",
        ],
    }


@pytest.fixture
def email_channel_config() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ email –∫–∞–Ω–∞–ª–∞."""
    return {
        "channel": "email",
        "enabled": True,
        "smtp_server": "smtp.example.com",
        "rate_limit": 100,
        "template_engine": "jinja2",
        "supported_types": ["announcement", "reminder", "survey_completed"],
    }


@pytest.fixture
def push_channel_config() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ push –∫–∞–Ω–∞–ª–∞."""
    return {
        "channel": "push",
        "enabled": True,
        "max_payload_size": 4096,
        "ttl": 86400,  # 24 —á–∞—Å–∞
        "supported_platforms": ["iOS", "Android", "Web"],
        "supported_types": ["reminder", "achievement_unlocked", "announcement"],
    }


@pytest.fixture
def sms_channel_config() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMS –∫–∞–Ω–∞–ª–∞."""
    return {
        "channel": "sms",
        "enabled": True,
        "provider": "twilio",
        "max_length": 160,
        "cost_per_message": 0.05,
        "supported_types": ["reminder", "urgent_announcement"],
    }


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@pytest.fixture
def performance_test_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    return {
        "concurrent_users": 100,
        "notifications_per_user": 10,
        "target_response_time": 1.0,  # —Å–µ–∫—É–Ω–¥—ã
        "max_queue_size": 1000,
        "test_duration": 60,  # —Å–µ–∫—É–Ω–¥—ã
        "channels_to_test": ["websocket", "push", "email"],
    }


@pytest.fixture
def notification_categories() -> List[str]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return [
        "surveys",
        "reminders",
        "announcements",
        "achievements",
        "system_messages",
        "security_alerts",
        "marketing",
        "support",
    ]


@pytest.fixture
def notification_types() -> List[str]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    return [
        "system_message",
        "survey_completed",
        "survey_available",
        "reminder",
        "achievement_unlocked",
        "announcement",
        "security_alert",
        "marketing_campaign",
        "support_ticket_update",
    ]


@pytest.fixture
def supported_channels() -> List[str]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    return ["websocket", "email", "push", "sms"]


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@pytest.fixture
def xss_test_data() -> List[str]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ XSS."""
    return [
        "<script>alert('xss')</script>",
        "javascript:alert('xss')",
        "<img src=x onerror=alert('xss')>",
        "<iframe src=javascript:alert('xss')></iframe>",
        "<%2Fscript%3E%3Cscript%3Ealert('xss')%3C%2Fscript%3E",
    ]


@pytest.fixture
def sql_injection_test_data() -> List[str]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ SQL –∏–Ω—ä–µ–∫—Ü–∏–π."""
    return [
        "'; DROP TABLE users; --",
        "' OR '1'='1",
        "' UNION SELECT * FROM users --",
        "'; INSERT INTO users VALUES ('hacker', 'pass'); --",
        "' OR 1=1 --",
    ]


@pytest.fixture
def large_payload_test_data() -> Dict[str, Any]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    return {
        "type": "system_message",
        "title": "X" * 1000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        "message": "Y" * 10000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "data": {
            "large_field": "Z" * 100000,  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –ø–æ–ª–µ
            "nested": {
                "level1": {
                    "level2": {
                        "level3": ["item"]
                        * 10000  # –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å –±–æ–ª—å—à–∏–º –º–∞—Å—Å–∏–≤–æ–º
                    }
                }
            },
        },
    }
