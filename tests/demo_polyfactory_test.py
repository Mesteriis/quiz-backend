"""
üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–±—Ä–∏–∫ —Å Polyfactory.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ä–æ—Å–æ–≤
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LazyAttribute –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
- –§–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
- Pydantic —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è API –¥–∞–Ω–Ω—ã—Ö
"""

import pytest
from sqlalchemy.ext.asyncio import AsyncSession

from tests.factories.users import (
    UserModelFactory,
    AdminUserModelFactory,
    TelegramUserModelFactory,
    ValidUserCreateDataFactory,
    create_user_for_test,
    create_user_with_auth,
    UserTestContext,
)
from tests.factories.surveys import (
    SurveyModelFactory,
    PublicSurveyModelFactory,
    create_survey_for_test,
    create_survey_with_questions,
    create_complete_survey_scenario,
    SurveyTestContext,
    ValidSurveyCreateDataFactory,
)


@pytest.mark.asyncio
class TestPolyfactoryDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Polyfactory —Ñ–∞–±—Ä–∏–∫."""

    async def test_user_factories_showcase(self, async_session: AsyncSession):
        """üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∞–±—Ä–∏–∫."""

        # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        regular_user = UserModelFactory.build()
        admin_user = AdminUserModelFactory.build()
        telegram_user = TelegramUserModelFactory.build()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        assert regular_user.username != admin_user.username
        assert regular_user.email != admin_user.email
        assert admin_user.is_admin is True
        assert telegram_user.telegram_id is not None

        # –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        users_batch = UserModelFactory.build_batch(5)
        assert len(users_batch) == 5

        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        usernames = [user.username for user in users_batch]
        assert len(set(usernames)) == 5  # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

    async def test_survey_factories_showcase(self, async_session: AsyncSession):
        """üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫ –æ–ø—Ä–æ—Å–æ–≤."""

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–æ–∑–¥–∞—Ç–µ–ª—è
        creator = await create_user_for_test(async_session, AdminUserModelFactory)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø—Ä–æ—Å–æ–≤
        basic_survey = SurveyModelFactory.build(created_by=creator.id)
        public_survey = PublicSurveyModelFactory.build(created_by=creator.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        assert public_survey.is_public is True
        assert public_survey.allow_anonymous is True
        assert basic_survey.title != public_survey.title  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

    async def test_context_managers_showcase(self, async_session: AsyncSession):
        """üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with UserTestContext(async_session) as user_ctx:
            user = user_ctx.user
            auth_headers = user_ctx.auth_headers

            assert user.id is not None
            assert "Authorization" in auth_headers

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with SurveyTestContext(async_session, user) as survey_ctx:
                survey = survey_ctx.survey

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                from tests.factories.surveys import (
                    TextQuestionModelFactory,
                    ChoiceQuestionModelFactory,
                )

                text_question = await survey_ctx.add_question(TextQuestionModelFactory)
                choice_question = await survey_ctx.add_question(
                    ChoiceQuestionModelFactory
                )

                assert text_question.question_type == "TEXT"
                assert choice_question.question_type in [
                    "SINGLE_CHOICE",
                    "MULTIPLE_CHOICE",
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
                from tests.factories.surveys import TextResponseModelFactory

                response = await survey_ctx.add_response(text_question, user)

                assert response.question_id == text_question.id
                assert response.user_id == user.id

        # –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î

    async def test_complete_scenario_showcase(self, async_session: AsyncSession):
        """üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è."""

        # –°–æ–∑–¥–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–ø—Ä–æ—Å–∞
        creator = await create_user_for_test(async_session, AdminUserModelFactory)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
        respondents = []
        for i in range(3):
            respondent = await create_user_for_test(
                async_session,
                UserModelFactory,
                username=f"respondent_{i}",
                commit=False,
            )
            respondents.append(respondent)

        await async_session.commit()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = await create_complete_survey_scenario(
            session=async_session,
            creator=creator,
            respondents=respondents,
            survey_type="public",
        )

        survey = scenario["survey"]
        questions = scenario["questions"]
        responses = scenario["responses"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert survey.is_public is True
        assert len(questions) == 3  # TEXT, SINGLE_CHOICE, SCALE
        assert len(responses) == len(questions) * len(respondents)  # 9 –æ—Ç–≤–µ—Ç–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        question_types = [q.question_type for q in questions]
        assert "TEXT" in question_types
        assert "SINGLE_CHOICE" in question_types
        assert "SCALE" in question_types

    async def test_pydantic_factories_showcase(self):
        """üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Pydantic —Ñ–∞–±—Ä–∏–∫ –¥–ª—è API."""

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        user_create_data = ValidUserCreateDataFactory.build()
        survey_create_data = ValidSurveyCreateDataFactory.build()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert hasattr(user_create_data, "username")
        assert hasattr(user_create_data, "email")
        assert hasattr(user_create_data, "password")

        assert hasattr(survey_create_data, "title")
        assert hasattr(survey_create_data, "description")
        assert survey_create_data.is_public is True

        # –ú–æ–∂–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ dict –¥–ª—è API
        user_dict = user_create_data.model_dump()
        survey_dict = survey_create_data.model_dump()

        assert isinstance(user_dict, dict)
        assert isinstance(survey_dict, dict)

    async def test_lazy_attributes_uniqueness(self, async_session: AsyncSession):
        """‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è LazyAttribute –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏."""

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for i in range(10):
            user = await create_user_for_test(async_session, commit=False)
            users.append(user)

        await async_session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–ª–µ–π
        usernames = [user.username for user in users]
        emails = [user.email for user in users]

        assert len(set(usernames)) == 10  # –í—Å–µ username —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        assert len(set(emails)) == 10  # –í—Å–µ email —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID –≤ –∏–º–µ–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for username in usernames:
            assert len(username.split("_")[-1]) >= 6  # UUID —á–∞—Å—Ç—å

    async def test_realistic_data_distributions(self, async_session: AsyncSession):
        """üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π."""

        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for i in range(100):
            user = UserModelFactory.build()
            users.append(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        active_users = [u for u in users if u.is_active]
        admin_users = [u for u in users if u.is_admin]

        # 85% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ (¬±10%)
        active_percentage = len(active_users) / len(users) * 100
        assert 75 <= active_percentage <= 95

        # 5% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∞–º–∏ (¬±5%)
        admin_percentage = len(admin_users) / len(users) * 100
        assert 0 <= admin_percentage <= 10

    async def test_performance_showcase(self, async_session: AsyncSession):
        """‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

        import time

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        admin = await create_user_for_test(async_session, AdminUserModelFactory)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
        start_time = time.time()

        surveys = []
        for i in range(50):
            survey = await create_survey_for_test(
                async_session,
                admin,
                SurveyModelFactory,
                commit=False,
                title=f"Performance Survey {i}",
            )
            surveys.append(survey)

        await async_session.commit()

        end_time = time.time()
        creation_time = end_time - start_time

        # –î–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å 50 –æ–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
        assert creation_time < 5.0  # –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
        assert len(surveys) == 50

        # –í—Å–µ –æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
        titles = [s.title for s in surveys]
        assert len(set(titles)) == 50


@pytest.mark.asyncio
async def test_file_database_demo(async_session: AsyncSession):
    """üìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""

    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª
    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å: TEST_USE_FILE_DB=true pytest tests/demo_polyfactory_test.py::test_file_database_demo -v

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    admin = await create_user_for_test(async_session, AdminUserModelFactory)

    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    survey, questions = await create_survey_with_questions(
        session=async_session,
        creator=admin,
        question_count=5,
        question_types=["TEXT", "SINGLE_CHOICE", "MULTIPLE_CHOICE", "SCALE", "BOOLEAN"],
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
    respondents = []
    for i in range(10):
        respondent = await create_user_for_test(
            async_session,
            UserModelFactory if i % 3 != 0 else TelegramUserModelFactory,
            commit=False,
        )
        respondents.append(respondent)

    await async_session.commit()

    # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª–µ –ë–î
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make analyze-test-db

    print(f"üìä Created survey: {survey.title}")
    print(f"‚ùì Questions: {len(questions)}")
    print(f"üë• Respondents: {len(respondents)}")
    print("üóÑÔ∏è Data saved to file database for analysis!")


# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:
# make test-with-file-db tests/demo_polyfactory_test.py -v
# make analyze-test-db
